{"filter":false,"title":"movie_steps.rb","tooltip":"/rottenpotatoes/features/step_definitions/movie_steps.rb","undoManager":{"mark":12,"position":12,"stack":[[{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"insert","lines":["Given /the following movies exist/ do |movies_table|"," ","  value = 0","  movies_table.hashes.each do |movie|","      Movie.create(movie)","      value += 1","  end","  ","end","","","Then(/^the director of \"(.*?)\" should be \"(.*?)\"$/) do |movie_title, director|","  ","    movie = Movie.find_by_title(movie_title)","    movie.director.should == director","    ","end"],"id":1}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["^"],"id":2}],[{"start":{"row":0,"column":5},"end":{"row":0,"column":7},"action":"insert","lines":["()"],"id":3}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":[")"],"id":4}],[{"start":{"row":0,"column":36},"end":{"row":0,"column":37},"action":"insert","lines":[")"],"id":5}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["^"],"id":6}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["/"],"id":7}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["/"],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"remove","lines":["Given( /the following movies exist/) do |movies_table|"," ","  value = 0","  movies_table.hashes.each do |movie|","      Movie.create(movie)","      value += 1","  end","  ","end","","","Then(/^the director of \"(.*?)\" should be \"(.*?)\"$/) do |movie_title, director|","  ","    movie = Movie.find_by_title(movie_title)","    movie.director.should == director","    ","end"],"id":9},{"start":{"row":0,"column":0},"end":{"row":30,"column":3},"action":"insert","lines":["Given /the following movies exist/ do |movies_table|","  value = 0","  movies_table.hashes.each do |movie|","      Movie.create(movie)","      value += 1","  end","end","","# Make sure that one string (regexp) occurs before or after another one","#   on the same page","","Then /I should see \"(.*)\" before \"(.*)\"/ do |e1, e2|","  #  ensure that that e1 occurs before e2.","  # puts page.body","  match = /#{e1}.*#{e2}/m =~ page.body","  assert !match.nil?","end","","Then /I should see all of the movies/ do","  page.should have_css(\"table#movies tbody tr\",:count => value.to_i)","end","","Then /I should not see all of the movies/ do","  page.should have_no_css(\"table#movies tbody tr\")","end","","#HW4","Then /^the director of \"([^\"]*)\" should be \"([^\"]*)\"$/ do |title, director|","  movie = Movie.find_by_title(title)","  movie.director.should == director","end"]}],[{"start":{"row":30,"column":3},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":11}],[{"start":{"row":32,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["","# Make it easier to express checking or unchecking several boxes at once","#  \"When I uncheck the following ratings: PG, G, R\"","#  \"When I check the following ratings: G\"","","When /I (un)?check the following ratings: (.*)/ do |uncheck, rating_list|","  rating_list.delete!(\"\\\"\")","  if uncheck.nil?","    rating_list.split(',').each do |field|","      check(\"ratings[\"+field.strip+\"]\")","    end","  else","    rating_list.split(',').each do |field|","      uncheck(\"ratings[\"+field.strip+\"]\")","    end","  end","end"],"id":12}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"remove","lines":["Given /the following movies exist/ do |movies_table|","  value = 0","  movies_table.hashes.each do |movie|","      Movie.create(movie)","      value += 1","  end","end","","# Make sure that one string (regexp) occurs before or after another one","#   on the same page","","Then /I should see \"(.*)\" before \"(.*)\"/ do |e1, e2|","  #  ensure that that e1 occurs before e2.","  # puts page.body","  match = /#{e1}.*#{e2}/m =~ page.body","  assert !match.nil?","end","","Then /I should see all of the movies/ do","  page.should have_css(\"table#movies tbody tr\",:count => value.to_i)","end","","Then /I should not see all of the movies/ do","  page.should have_no_css(\"table#movies tbody tr\")","end","","#HW4","Then /^the director of \"([^\"]*)\" should be \"([^\"]*)\"$/ do |title, director|","  movie = Movie.find_by_title(title)","  movie.director.should == director","end","","","# Make it easier to express checking or unchecking several boxes at once","#  \"When I uncheck the following ratings: PG, G, R\"","#  \"When I check the following ratings: G\"","","When /I (un)?check the following ratings: (.*)/ do |uncheck, rating_list|","  rating_list.delete!(\"\\\"\")","  if uncheck.nil?","    rating_list.split(',').each do |field|","      check(\"ratings[\"+field.strip+\"]\")","    end","  else","    rating_list.split(',').each do |field|","      uncheck(\"ratings[\"+field.strip+\"]\")","    end","  end","end"],"id":13},{"start":{"row":0,"column":0},"end":{"row":51,"column":3},"action":"insert","lines":["# Add a declarative step here for populating the DB with movies.","","value = 0","Given /the following movies exist/ do |movies_table|","  value = 0","  movies_table.hashes.each do |movie|","      Movie.create(movie)","      value += 1","  end","end","","# Make sure that one string (regexp) occurs before or after another one","#   on the same page","","Then /I should see \"(.*)\" before \"(.*)\"/ do |e1, e2|","  #  ensure that that e1 occurs before e2.","  # puts page.body","  match = /#{e1}.*#{e2}/m =~ page.body","  assert !match.nil?","end","","Then /I should see all of the movies/ do","  page.should have_css(\"table#movies tbody tr\",:count => value.to_i)","end","","Then /I should not see all of the movies/ do","  page.should have_no_css(\"table#movies tbody tr\")","end","","#HW4","Then /^the director of \"([^\"]*)\" should be \"([^\"]*)\"$/ do |title, director|","  movie = Movie.find_by_title(title)","  movie.director.should == director","end","","","# Make it easier to express checking or unchecking several boxes at once","#  \"When I uncheck the following ratings: PG, G, R\"","#  \"When I check the following ratings: G\"","","When /I (un)?check the following ratings: (.*)/ do |uncheck, rating_list|","  rating_list.delete!(\"\\\"\")","  if uncheck.nil?","    rating_list.split(',').each do |field|","      check(\"ratings[\"+field.strip+\"]\")","    end","  else","    rating_list.split(',').each do |field|","      uncheck(\"ratings[\"+field.strip+\"]\")","    end","  end","end"]}]]},"ace":{"folds":[],"scrolltop":309,"scrollleft":0,"selection":{"start":{"row":8,"column":5},"end":{"row":8,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1479626454555,"hash":"6ec82596b560979d62515db11f46ec0df0acd9be"}